#!/usr/bin/env node

// Transparently allow require-ing `component.jsx`.
require('node-jsx').install({ extension: '.jsx' });

/*!
 * `bin/server` contains all server-specific code, run immediately only on the
 * server.
 *
 * Our server-specific concerns are:
 * - Serving static and compiled files.
 * - Server-side routing and rendering initial content.
 * - Bad or old links (404, 301, etc.)
 */
var path = require('path');
var ecstatic = require('ecstatic');
var connect = require('connect');
var morgan = require('morgan');
var config = require('../lib/config');
var renderer = require('../lib/renderer');
var Router = require('../lib/router');
var router = new Router();
var app = connect();

// Install a development-focused logger.
// NOTE: On a production site, this should be a more comprehensive solution.
app.use(morgan('dev'));

// Ecstatic middleware for static files. Ecstatic should fall through on _all_
// unknown routes.
app.use(ecstatic({
  root: path.resolve(__dirname, '..', 'public'),
  showDir: false,
  autoIndex: false
}));

// If the request URL is valid, this renders the top-level component, the
// Application, based on the current Router configuration. Otherwise, a 404
// is generated.
app.use(renderer({
  templatePath: path.resolve(__dirname, '..', 'public', 'index.html'),
  router: router
}));


app.listen(config.port);

console.log('Server %s listening on port %s...', process.pid, config.port);
console.log('Config: %j', config);

